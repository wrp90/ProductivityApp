{"ast":null,"code":"var _jsxFileName = \"/Users/doraorozco/Class_Stuff/ProductivityApp/client/src/pages/Notes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Notes() {\n  _s();\n\n  // Setting our component's initial state\n  const [notes, setNotes] = useState([]);\n  const [formObject, setFormObject] = useState({}); // Load all notes and store them with setNotes\n\n  useEffect(() => {\n    loadNotes();\n  }, []); // Loads all notes and sets them to notes\n\n  function loadNotes() {\n    API.getNotes().then(res => setNotes(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Deletes a note from the database with a given id, then reloads Notes from the db\n\n  function deleteNote(id) {\n    API.deleteNote(id).then(res => loadNotes()).catch(err => console.log(err));\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormObject({ ...formObject,\n      [name]: value\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveNote method to save the note data\n  // Then reload Notes from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.body) {\n      API.saveNote({\n        title: formObject.title,\n        body: formObject.body\n      }).then(res => loadNotes()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-8\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"title\",\n            placeholder: \"Title (required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"body\",\n            placeholder: \"Body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormBtn, {\n            disabled: !(formObject.body && formObject.title),\n            onClick: handleFormSubmit,\n            children: \"Submit Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6 sm-12\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Saved Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), notes.length ? /*#__PURE__*/_jsxDEV(List, {\n          children: notes.map(note => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/notes/\" + note._id,\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: note.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(DeleteBtn, {\n              onClick: () => deleteNote(note._id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 21\n            }, this)]\n          }, note._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No Results to Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Notes, \"ZEGqEAk7Y9M6JS7BbIHL4AYXVKU=\");\n\n_c = Notes;\nexport default Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/Users/doraorozco/Class_Stuff/ProductivityApp/client/src/pages/Notes.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Notes","notes","setNotes","formObject","setFormObject","loadNotes","getNotes","then","res","data","catch","err","console","log","deleteNote","id","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","title","body","saveNote","length","map","note","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Notes() {\n  // Setting our component's initial state\n  const [notes, setNotes] = useState([])\n  const [formObject, setFormObject] = useState({})\n\n  // Load all notes and store them with setNotes\n  useEffect(() => {\n    loadNotes()\n  }, [])\n\n  // Loads all notes and sets them to notes\n  function loadNotes() {\n    API.getNotes()\n      .then(res => \n        setNotes(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a note from the database with a given id, then reloads Notes from the db\n  function deleteNote(id) {\n    API.deleteNote(id)\n      .then(res => loadNotes())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveNote method to save the note data\n  // Then reload Notes from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.title && formObject.body) {\n      API.saveNote({\n        title: formObject.title,\n        body: formObject.body\n      })\n        .then(res => loadNotes())\n        .catch(err => console.log(err));\n    }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-8\">\n            <Jumbotron>\n              <h1>Notes</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"title\"\n                placeholder=\"Title (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"body\"\n                placeholder=\"Body\"\n              />\n              <FormBtn\n                disabled={!(formObject.body && formObject.title)}\n                onClick={handleFormSubmit}\n              >\n                Submit Note\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Saved Notes</h1>\n            </Jumbotron>\n            {notes.length ? (\n              <List>\n                {notes.map(note => (\n                  <ListItem key={note._id}>\n                    <Link to={\"/notes/\" + note._id}>\n                      <strong>\n                        {note.title}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteNote(note._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n\nexport default Notes;"]},"metadata":{},"sourceType":"module"}